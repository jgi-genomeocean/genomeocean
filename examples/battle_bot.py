import argparse
import subprocess
import pandas as pd
import os

def run_autocomplete(config_file, model_dir, model1_genes, num_sequences, output_prefix, scoring_method):
    """Runs the autocomplete workflow."""
    command = [
        'bash',
        './run_auto_complete_workflow.sh',
        config_file,
        model_dir,
        model1_genes,
        str(num_sequences),
        output_prefix,
        scoring_method
    ]
    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Error running autocomplete for {output_prefix}:")
        print(f"The command was: {' '.join(command)}")
        print(result.stderr)
        return False
    return True

def main():
    parser = argparse.ArgumentParser(description="Battle-bot for gene autocompletion.")
    parser.add_argument("--model1_genes", required=True, help="CSV file with genes generated by model1. Required")
    parser.add_argument("--model2_dir", default="DOEJGI/Genomeocean-4B", help="Directory of model2 for autocompletion. Default: DOEJGI/Genomeocean-4B")
    parser.add_argument("--output_prefix", default="battle-bot", help="prefix for saving results. Default: battle-bot")
    args = parser.parse_args()

    # create output dir
    os.mkdir(os.path.dirname(args.output_prefix), mode=0o777)
    # Read the generated genes from model1
    try:
        model1_df = pd.read_csv(args.model1_genes)
    except FileNotFoundError:
        print(f"Error: {args.model1_genes} not found.")
        return
    
    # Loop through each gene and run autocompletion
    for index, row in model1_df.iterrows():
        gene_id = row['id']
        if os.path.exists(f"battle_bot_output_{gene_id}.csv"):
            continue
        gene_seq = row['gene']
        orf_len = len(row['ORF'])
        gene_len = len(gene_seq)

        # Create a temporary config file for this gene
        config_content = f"""
sequence="{gene_seq}"
start=0
end={gene_len - 1}
strand=1
pstart=0
pend=300
min=1000
max=1024
sstart=100
send={orf_len}
"""
        config_filename = f"temp_config_{gene_id}.txt"
        with open(config_filename, "w") as f:
            f.write(config_content)

        print(f"Running autocomplete for {gene_id}...")
        success = run_autocomplete(
            config_filename,
            args.model2_dir,
            args.model1_genes,
            20,  # num_sequences (trials)
            f"{args.output_prefix}_{gene_id}",
            "pairwise"  # scoring_method
        )

        # Clean up the temporary config file
        os.remove(config_filename)



if __name__ == "__main__":
    main()
